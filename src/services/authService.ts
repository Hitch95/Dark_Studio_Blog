// src/services/authService.ts
import { User } from '../types';
import { userRepository } from '../../repositories/userRepository';
import { createClient } from '@/utils/supabase/client';

// Initialize Supabase client for token management
const supabase = createClient();

// In a real app, you would use a proper JWT library
// This is a simplified example
const generateToken = (user: User): string => {
  // Creating a simple encoded token (not secure, just for demonstration)
  return Buffer.from(
    JSON.stringify({
      id: user.id,
      email: user.email,
      exp: Date.now() + 24 * 60 * 60 * 1000, // 24 hours
    })
  ).toString('base64');
};

const verifyToken = (token: string): User | null => {
  try {
    const userData = JSON.parse(Buffer.from(token, 'base64').toString('utf-8'));

    // Check if token is expired
    if (userData.exp < Date.now()) {
      return null;
    }

    return userData as User;
  } catch (error) {
    return null;
  }
};

export class AuthService {
  // Register a new user
  async register(
    email: string,
    password: string
  ): Promise<{ user: User | null; error: string | null }> {
    // Check if user already exists
    const existingUser = await userRepository.findUserByEmail(email);
    if (existingUser) {
      return { user: null, error: 'User already exists' };
    }

    // Create the user in your custom table
    const newUser = await userRepository.createUser({
      id: '', // This will be generated by the database
      firstname: '',
      lastname: '',
      email,
      emailVerified: false,
      password,
      image: '',
      username: '',
      isAdmin: false,
    });

    if (!newUser) {
      return { user: null, error: 'Failed to create user' };
    }

    return { user: newUser, error: null };
  }

  // Login a user
  async login(
    email: string,
    password: string
  ): Promise<{ token: string | null; error: string | null }> {
    // Check if user exists
    const user = await userRepository.findUserByEmail(email);
    if (!user) {
      return { token: null, error: 'Invalid login credentials' };
    }

    // Verify password
    const isPasswordValid = await userRepository.verifyPassword(
      email,
      password
    );
    if (!isPasswordValid) {
      return { token: null, error: 'Invalid login credentials' };
    }

    // Generate token
    const token = generateToken(user);
    // In a real implementation, you'd store the session info
    return { token, error: null };
  }

  // Get current authenticated user
  async getCurrentUser() {
    const {
      data: { user },
    } = await supabase.auth.getUser();
    return user;
  }

  // Logout user
  async logout(): Promise<void> {
    // In a real implementation, you'd invalidate the token
    const { error } = await supabase.auth.signOut();
  }
}

export default new AuthService();
